# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import pytesseract
import shutil
import os
import random
try:
 from PIL import Image
except ImportError:
 import Image
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow,QApplication,QWidget,QPushButton,QHBoxLayout,QFileDialog,QMessageBox
import spacy
from spacy.lang.en.stop_words import STOP_WORDS
from string import punctuation
import PyPDF2
import os.path
from decimal import Decimal 
import fitz
pytesseract.pytesseract.tesseract_cmd = r'C:/Program Files/Tesseract-OCR/tesseract.exe'
# importing libraries

import nltk
import gensim
import numpy as np
import pandas as pd
import PyPDF2
from nltk.tokenize import sent_tokenize, word_tokenize
nltk.download('punkt')

stopwords = list(STOP_WORDS)
nlp = spacy.load('en_core_web_sm')
summer = ' '

location_1 = ''
location_2 = ''

tokenized_1 = []

tokenized_2 = []

extension_1 = ' '
extension_2 = ' '

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1149, 864)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(-6, 5, 1121, 831))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("1457874.jpg"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.textEdit_1 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_1.setGeometry(QtCore.QRect(60, 30, 1031, 151))
        font = QtGui.QFont()
        font.setFamily("HP Simplified Hans")
        self.textEdit_1.setFont(font)
        self.textEdit_1.setAutoFillBackground(True)
        self.textEdit_1.setReadOnly(True)
        self.textEdit_1.setObjectName("textEdit_1")
        self.uploadfile_1 = QtWidgets.QPushButton(self.centralwidget)
        self.uploadfile_1.setGeometry(QtCore.QRect(140, 270, 171, 51))
        self.uploadfile_1.setObjectName("uploadfile_1")
        self.uploadfile_2 = QtWidgets.QPushButton(self.centralwidget)
        self.uploadfile_2.setGeometry(QtCore.QRect(790, 270, 171, 51))
        self.uploadfile_2.setObjectName("uploadfile_2")
        self.percent = QtWidgets.QLabel(self.centralwidget)
        self.percent.setGeometry(QtCore.QRect(400, 330, 271, 51))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI")
        font.setPointSize(10)
        self.percent.setFont(font)
        self.percent.setStyleSheet("color:white;\n"
"size:42;")
        self.percent.setScaledContents(True)
        self.percent.setObjectName("percent")
        self.summ_1 = QtWidgets.QTextEdit(self.centralwidget)
        self.summ_1.setGeometry(QtCore.QRect(113, 480, 291, 311))
        self.summ_1.setObjectName("summ_1")
        self.textEdit_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_2.setGeometry(QtCore.QRect(780, 480, 291, 311))
        self.textEdit_2.setObjectName("textEdit_2")
        self.percent_2 = QtWidgets.QLabel(self.centralwidget)
        self.percent_2.setGeometry(QtCore.QRect(110, 410, 271, 51))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI")
        font.setPointSize(10)
        self.percent_2.setFont(font)
        self.percent_2.setStyleSheet("color:white;\n"
"size:42;")
        self.percent_2.setScaledContents(True)
        self.percent_2.setObjectName("percent_2")
        self.percent_3 = QtWidgets.QLabel(self.centralwidget)
        self.percent_3.setGeometry(QtCore.QRect(760, 410, 271, 51))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI")
        font.setPointSize(10)
        self.percent_3.setFont(font)
        self.percent_3.setStyleSheet("color:white;\n"
"size:42;")
        self.percent_3.setScaledContents(True)
        self.percent_3.setObjectName("percent_3")
        self.label.raise_()
        self.uploadfile_1.raise_()
        self.uploadfile_2.raise_()
        self.percent.raise_()
        self.textEdit_1.raise_()
        self.summ_1.raise_()
        self.textEdit_2.raise_()
        self.percent_2.raise_()
        self.percent_3.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1149, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.uploadfile_1.clicked.connect(self.openFileDialog_1)
        self.uploadfile_2.clicked.connect(self.openFileDialog_2)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.textEdit_1.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'HP Simplified Hans\'; font-size:7.8pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:24pt; text-decoration: underline;\">Project Pligrims</span></p>\n"
"<p align=\"justify\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:14pt;\">                                           1. Check Similarity between any 2 files</span></p>\n"
"<p align=\"justify\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'MS Shell Dlg 2\'; font-size:14pt;\"><br /></p>\n"
"<p align=\"justify\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:14pt;\">                                           2. Get an insight of summary of your files</span></p></body></html>"))
        self.uploadfile_1.setText(_translate("MainWindow", "Upload File 1"))
        self.uploadfile_2.setText(_translate("MainWindow", "Upload File 2"))
        self.percent.setWhatsThis(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:16pt;\">Plagrism</span></p><p><br/></p></body></html>"))
        self.percent.setText(_translate("MainWindow", "             Plagarismn Percentage"))
        self.summ_1.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.8pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.percent_2.setWhatsThis(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:16pt;\">Plagrism</span></p><p><br/></p></body></html>"))
        self.percent_2.setText(_translate("MainWindow", "              Summary of File-1 "))
        self.percent_3.setWhatsThis(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:16pt;\">Plagrism</span></p><p><br/></p></body></html>"))
        self.percent_3.setText(_translate("MainWindow", "                 Summary of File-2"))


    def pdf_extract(self):
        global tokenized_1
        global tokenized_2
        if len(tokenized_1) == 0:

            f1 = open(location_1, 'rb')
            nltk.download('punkt')
            read1 = PyPDF2.PdfFileReader(f1)
            pdf_text_1 = [0]
            if read1.isEncrypted:
                read1.decrypt('')
            page1 = read1.getPage(0)
            text1 = page1.extractText()
            if text1 == '':
                doc_1 = fitz.open(location_1)
                pdf1_text =[0]
                for i in range(0,read1.numPages):
                    page = doc_1.loadPage(i)  # number of page
                    pix = page.getPixmap()
                    output = "outfile.png"
                    pix.writePNG(output)
                    extractedInformation = pytesseract.image_to_string(Image.open('outfile.png'))
                    pdf_text_1.append(extractedInformation)
            else:

                for p in range(read1.numPages):

                    page = read1.getPage(p)

                    pdf_text_1.append(page.extractText())

                f1.close()
            

            for data in pdf_text_1:

                token_1 = sent_tokenize(str(data))

                for line in token_1:

                    tokenized_1.append(line)
        else:

            f2 = open(location_2, 'rb')

            nltk.download('punkt')
            read2 = PyPDF2.PdfFileReader(f2)

            # extracting texts from file 2

            pdf_text_2 = [0]

            if read2.isEncrypted:
                read2.decrypt('')
            page2 = read2.getPage(0)
            text2 = page2.extractText()
            if text2 == '':
                doc_2 = fitz.open(location_2)
                pdf2_text =[0]
                for i in range(0,read2.numPages):
                    page = doc_2.loadPage(i)  # number of page
                    pix = page.getPixmap()
                    output = "outfile.png"
                    pix.writePNG(output)
                    extractedInformation = pytesseract.image_to_string(Image.open('outfile.png'))
                    pdf_text_2.append(extractedInformation)
            else:

                for p in range(read2.numPages):

                    page = read2.getPage(p)

                    pdf_text_2.append(page.extractText())

                f2.close()

            for data in pdf_text_2:

                token_2 = sent_tokenize(str(data))

                for line in token_2:

                    tokenized_2.append(line)

                    
    def doc_extract(self):
        global tokenized_1
        global tokenized_2
        if len(tokenized_1) == 0:

            f1 = open(location_1)

            for data in f1:

                token_1 = sent_tokenize(str(data))

                for line in token_1:

                    tokenized_1.append(line)
        else:

            f2 = open(location_2)

            for data in f2:

                token_2 = sent_tokenize(str(data))

                for line in token_2:

                    tokenized_2.append(line)

    def caller(self):

        global extension_1
        global extension_2
        global location_1
        global location_2
        global tokenized_1
        global tokenized_1

        if len(location_2) == 0:
            aextension = location_1.split('.')
            extension_1 = aextension[1]
            if extension_1 == 'pdf':

                self.pdf_extract()
            else:

                self.doc_extract()
        else:

            bextension = location_2.split('.')
            extension_2 = bextension[1]
            if extension_2 == 'pdf':
                self.pdf_extract()
            else:

                self.doc_extract()
        
        if len(location_1) != 0 and len(location_2) != 0:
            
            if location_1 == location_2:
                fname = '100'
                self.percent.setText("Percentage plagarismn detected is "+fname)
                tokenized_1.clear()
                tokenized_2.clear()
                location_1 = ''
                location_2 = ''
                extension_1 = ''
                extension_2 = ''
            else:
                word_tokenized_1 = [[word.lower() for word in
                                    word_tokenize(str(text))]
                                    for text in tokenized_1]
                dictionary = gensim.corpora.Dictionary(word_tokenized_1)
                corpus = [dictionary.doc2bow(words) for words in
                          word_tokenized_1]
                tf_idf = gensim.models.TfidfModel(corpus)

                sims = gensim.similarities.Similarity('',
                        tf_idf[corpus], num_features=len(dictionary))

                for line in tokenized_1:

                    word_tokenized_2 = [w.lower() for w in
                            word_tokenize(line)]

                    query_doc_bow = dictionary.doc2bow(word_tokenized_2)
                query_doc_tf_idf = tf_idf[query_doc_bow]

                sum_of_sims = np.sum(sims[query_doc_tf_idf],
                        dtype=np.float32)

                fname = str(sum_of_sims / len(sims[query_doc_tf_idf])
                            * 100)
                import math
                fname = Decimal(fname)
                self.percent.setText("Percentage of plagarism in % "+str(math.floor(fname)))
                tokenized_1.clear()
                tokenized_2.clear()
                location_1 = ''
                location_2 = ''
                extension_1 = ''
                extension_2 = ''


    def openFileDialog_1(self):
        global location_1
        option = QFileDialog.Options()
        widget = QWidget()
        file = QFileDialog.getOpenFileName(widget, 'Open Single File',
                'Default File', '',
                options=option)
        f = open(file[0], 'rb')
        location_1 = file[0]
        aextension = location_1.split('.')
        extension = aextension[1]
        if extension == "pdf":
            f = open(file[0], 'rb')
            text = [0]  # zero is a placehoder to make page 1 = index 1

            pdf_reader = PyPDF2.PdfFileReader(f)
            if pdf_reader.isEncrypted:
                pdf_reader.decrypt('')
            page1 = pdf_reader.getPage(0)
            text1 = page1.extractText()
            if text1 == '':
                doc_1 = fitz.open(location_1)
                pdf1_text =[0]
                for i in range(0,pdf_reader.numPages):
                    page = doc_1.loadPage(i)  # number of page
                    pix = page.getPixmap()
                    output = "outfile.png"
                    pix.writePNG(output)
                    extractedInformation = pytesseract.image_to_string(Image.open('outfile.png'))
                    text.append(extractedInformation)
            else:

                for p in range(pdf_reader.numPages):

                    page = pdf_reader.getPage(p)

                    text.append(page.extractText())

                f.close()
            text = ' '.join([str(elem) for elem in text])
        elif extension == "txt" :
            f = open(file[0])
            text = f.read()

        else :
            msg = QMessageBox()
            msg.setWindowTitle("Error")
            msg.setText("Enter a valid File ie. pdf or txt")
            msg.setIcon(QMessageBox.Warning)
            text=" "
            x=msg.exec_()
        doc = nlp(text)
        tokens = [token.text for token in doc]
        from string import punctuation
        punctuation = punctuation + '\n'
        word_frequencies = {}
        for word in doc:
            if word.text.lower() not in stopwords:
                if word.text.lower() not in punctuation:
                    if word.text not in word_frequencies.keys():
                        word_frequencies[word.text] = 1
                    else:
                        word_frequencies[word.text] += 1

        max_frequency = max(word_frequencies.values())
        for word in word_frequencies.keys():

            word_frequencies[word] = word_frequencies[word] \
                / max_frequency

        sentence_tokens = [sent for sent in doc.sents]

        sentence_scores = {}
        for sent in sentence_tokens:
            for word in sent:
                if word.text.lower() in word_frequencies.keys():
                    if sent not in sentence_scores.keys():
                        sentence_scores[sent] = \
                            word_frequencies[word.text.lower()]
                    else:
                        sentence_scores[sent] += \
                            word_frequencies[word.text.lower()]

        from heapq import nlargest

        select_length = int(len(sentence_tokens) * 0.35)
        summary = nlargest(select_length, sentence_scores,
                           key=sentence_scores.get)
        summary = ' '.join([str(elem) for elem in summary])
        self.summ_1.setText(summary)

        self.caller()


    def openFileDialog_2(self):
        global location_2
        option = QFileDialog.Options()
        widget = QWidget()
        file1 = QFileDialog.getOpenFileName(widget, 'Open Single File',
                'Default File', '', options=option)
        f = open(file1[0], 'rb')
        location_2 = file1[0]
        aextension1 = location_2.split('.')
        extension1 = aextension1[1]
        if extension1 == "pdf":
            f = open(file1[0], 'rb')
            location_2 = file1[0]
            text = [0]  # zero is a placehoder to make page 1 = index 1

            pdf_reader = PyPDF2.PdfFileReader(f)
            if pdf_reader.isEncrypted:
                pdf_reader.decrypt('')
            page1 = pdf_reader.getPage(0)
            text1 = page1.extractText()
            if text1 == '':
                doc_1 = fitz.open(location_2)
                pdf1_text =[0]
                for i in range(0,pdf_reader.numPages):
                    page = doc_1.loadPage(i)  # number of page
                    pix = page.getPixmap()
                    output = "outfile.png"
                    pix.writePNG(output)
                    extractedInformation = pytesseract.image_to_string(Image.open('outfile.png'))
                    print("ok")
                    text.append(extractedInformation)
            else:

                for p in range(pdf_reader.numPages):

                    page = pdf_reader.getPage(p)

                    text.append(page.extractText())

                f.close()
            text = ' '.join([str(elem) for elem in text])
        elif extension1 == "txt" :
            f = open(file1[0])
            location_2 = file1[0]
            text = f.read()

        else :
            msg = QMessageBox()
            msg.setWindowTitle("Error")
            msg.setText("Enter a valid File ie. pdf or txt")
            msg.setIcon(QMessageBox.Warning)
            text=" "
            x=msg.exec_()

        
        doc = nlp(text)
        tokens = [token.text for token in doc]
        from string import punctuation
        punctuation = punctuation + '\n'
        word_frequencies = {}
        for word in doc:
            if word.text.lower() not in stopwords:
                if word.text.lower() not in punctuation:
                    if word.text not in word_frequencies.keys():
                        word_frequencies[word.text] = 1
                    else:
                        word_frequencies[word.text] += 1

        max_frequency = max(word_frequencies.values())
        for word in word_frequencies.keys():

            word_frequencies[word] = word_frequencies[word] \
                / max_frequency

        sentence_tokens = [sent for sent in doc.sents]

        sentence_scores = {}
        for sent in sentence_tokens:
            for word in sent:
                if word.text.lower() in word_frequencies.keys():
                    if sent not in sentence_scores.keys():
                        sentence_scores[sent] = \
                            word_frequencies[word.text.lower()]
                    else:
                        sentence_scores[sent] += \
                            word_frequencies[word.text.lower()]

        from heapq import nlargest

        select_length = int(len(sentence_tokens) * 0.35)
        summary = nlargest(select_length, sentence_scores,
                           key=sentence_scores.get)
        summary = ' '.join([str(elem) for elem in summary])
        self.textEdit_2.setText(summary)
        self.caller()

    

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
